---
import BaseLayout from "../layouts/BaseLayout.astro";
import Button from "../components/Button.astro";
import Card from "../components/Card.astro";
import CollapsibleCard from "../components/CollapsibleCard.astro";

const pageTitle = "Projects";

import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
type ProjectEntry = CollectionEntry<"projects">;

const projects = await getCollection("projects");
const maintained_projects = projects.filter(
  (project: ProjectEntry) => project.data.maintained === true,
);
const unmaintained_projects = projects.filter(
  (project: ProjectEntry) => project.data.maintained === false,
);
---

<BaseLayout title={pageTitle}>
  <h2 class="mt-5 p-2 text-4xl text-primary">{pageTitle}</h2>
  <article class="m-8">
    {
      maintained_projects.map((project) => (
        <Card anchor={project.data.title}>
          <div slot="title">{project.data.title}</div>
          <div slot="subtitle">{project.data.subtitle}</div>
          <p>
            <Fragment set:html={project.data.description} />
          </p>
          {project.data.links ? (
            <div slot="button">
              {project.data.links.map((link) => (
                <Button href={link.url} variant={link.variant ? link.variant : "default"}>
                  {link.title}
                </Button>
              ))}
            </div>
          ) : (
            ""
          )}
        </Card>
      ))
    }
    <hr class="my-8" />
    <h2 class="text-2xl text-primary">Unmaintained</h2>

    <p>
      Projects which have either reached a level of maturity that I am satisfied with or that are
      not longer the main focus of active open source maintenance efforts.
    </p>

    {
      unmaintained_projects.map((project) => (
        <CollapsibleCard anchor={project.data.title}>
          <div slot="title">{project.data.title}</div>
          <div slot="subtitle">{project.data.subtitle}</div>
          <p>
            <Fragment set:html={project.data.description} />
          </p>
          {project.data.links ? (
            <div slot="button">
              {project.data.links.map((link) => (
                <Button href={link.url} variant={link.variant ? link.variant : "default"}>
                  {link.title}
                </Button>
              ))}
            </div>
          ) : (
            ""
          )}
        </CollapsibleCard>
      ))
    }
  </article>
</BaseLayout>

<style>
  span.email::after {
    content: "moc.liamg@emheo.ytram";
    unicode-bidi: bidi-override;
    direction: rtl;
  }
</style>
